basePath: /
definitions:
  entity.Image:
    properties:
      created_at:
        type: integer
      id:
        type: string
      image_name:
        type: string
      updated_at:
        type: integer
      url:
        type: string
      wishlist_item_id:
        type: string
    type: object
  entity.User:
    properties:
      created_at:
        type: integer
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: integer
    type: object
  entity.Wishlist:
    properties:
      created_at:
        type: integer
      description:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  entity.WishlistItem:
    properties:
      created_at:
        type: integer
      description:
        type: string
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/entity.Image'
        type: array
      price:
        type: integer
      title:
        type: string
      updated_at:
        type: integer
      url:
        type: string
      wishlist_id:
        type: string
    type: object
  httperrs.ErrorResponse:
    properties:
      error:
        $ref: '#/definitions/httperrs.ServiceError'
    type: object
  httperrs.ServiceError:
    properties:
      kind:
        type: string
      message:
        type: string
      param:
        type: string
    type: object
  request.AddWishlistItemRequest:
    properties:
      description:
        type: string
      image_ids:
        items:
          type: string
        maxItems: 5
        type: array
      price:
        type: integer
      title:
        type: string
      url:
        type: string
      wishlist_id:
        type: string
    required:
      - url
      - wishlist_id
    type: object
  request.SignInRequest:
    properties:
      email:
        minLength: 4
        type: string
      password:
        minLength: 6
        type: string
    required:
      - email
      - password
    type: object
  request.SignUpRequest:
    properties:
      email:
        minLength: 4
        type: string
      name:
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
    required:
      - email
      - name
      - password
    type: object
  request.UpdateWishlistItemRequest:
    properties:
      description:
        type: string
      image_ids:
        items:
          type: string
        maxItems: 5
        type: array
      price:
        type: integer
      title:
        type: string
    type: object
  request.WishlistRequest:
    properties:
      description:
        type: string
      title:
        minLength: 3
        type: string
    required:
      - title
    type: object
host: localhost:8000
info:
  contact:
    email: stas.bukovskyi@gmail.com
    name: Stas Bukovskyi
  description: This is a simple API to create and manage wishlists with any sort of
    products or content
  title: Go Wishlist API
  version: "1.0"
paths:
  /api/v1/images/:
    post:
      consumes:
        - multipart/form-data
      description: Upload image and get its id and url
      produces:
        - application/json
      responses:
        "200":
          description: uploaded image
          schema:
            $ref: '#/definitions/entity.Image'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
      security:
        - ApiKeyAuth: [ ]
      summary: Upload Image
      tags:
        - images
  /api/v1/images/{id}:
    delete:
      consumes:
        - application/json
      description: Delete an image by its id
      parameters:
        - description: image id
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
      security:
        - ApiKeyAuth: [ ]
      summary: Delete Image
      tags:
        - images
  /api/v1/wishlist-items/:
    post:
      consumes:
        - application/json
      description: Create a new wishlist item
      parameters:
        - description: create wishlist item request
          in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/request.AddWishlistItemRequest'
      produces:
        - application/json
      responses:
        "200":
          description: wishlist item
          schema:
            $ref: '#/definitions/entity.WishlistItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
      security:
        - ApiKeyAuth: [ ]
      summary: Create a new wishlist item
      tags:
        - wishlist-items
  /api/v1/wishlist-items/{id}:
    delete:
      consumes:
        - application/json
      description: Delete wishlist item by its id
      parameters:
        - description: wishlist item id
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: wishlist item
          schema:
            $ref: '#/definitions/entity.WishlistItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
      security:
        - ApiKeyAuth: [ ]
      summary: Delete wishlist item
      tags:
        - wishlist-items
    get:
      consumes:
        - application/json
      description: Get wishlist item by its id
      parameters:
        - description: wishlist item id
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: wishlist item
          schema:
            $ref: '#/definitions/entity.WishlistItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
      security:
        - ApiKeyAuth: [ ]
      summary: Get wishlist item
      tags:
        - wishlist-items
    put:
      consumes:
        - application/json
      description: Create existing wishlist item by its id
      parameters:
        - description: wishlist item id
          in: path
          name: id
          required: true
          type: string
        - description: update wishlist item request
          in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/request.UpdateWishlistItemRequest'
      produces:
        - application/json
      responses:
        "200":
          description: wishlist item
          schema:
            $ref: '#/definitions/entity.WishlistItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
      security:
        - ApiKeyAuth: [ ]
      summary: Update a wishlist item
      tags:
        - wishlist-items
  /api/v1/wishlists/:
    get:
      consumes:
        - application/json
      description: Get all wishlists of this user
      produces:
        - application/json
      responses:
        "200":
          description: wishlists
          schema:
            items:
              $ref: '#/definitions/entity.Wishlist'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
      security:
        - ApiKeyAuth: [ ]
      summary: List all wishlists
      tags:
        - wishlists
    post:
      consumes:
        - application/json
      description: Create a new, empty wishlist
      parameters:
        - description: wishlist request
          in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/request.WishlistRequest'
      produces:
        - application/json
      responses:
        "200":
          description: created wishlist
          schema:
            $ref: '#/definitions/entity.Wishlist'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
      security:
        - ApiKeyAuth: [ ]
      summary: Create a new wishlist
      tags:
        - wishlists
  /api/v1/wishlists/{id}:
    delete:
      consumes:
        - application/json
      description: Delete a wishlist by its id
      parameters:
        - description: wishlist id
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: deleted wishlist
          schema:
            $ref: '#/definitions/entity.Wishlist'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
      security:
        - ApiKeyAuth: [ ]
      summary: Delete a wishlist
      tags:
        - wishlists
    get:
      consumes:
        - application/json
      description: Get wishlist by its id
      parameters:
        - description: wishlist id
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: wishlist
          schema:
            $ref: '#/definitions/entity.Wishlist'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
      security:
        - ApiKeyAuth: [ ]
      summary: Get wishlist
      tags:
        - wishlists
    put:
      consumes:
        - application/json
      description: Update a wishlist by its id
      parameters:
        - description: wishlist id
          in: path
          name: id
          required: true
          type: string
        - description: wishlist request
          in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/request.WishlistRequest'
      produces:
        - application/json
      responses:
        "200":
          description: updated wishlist
          schema:
            $ref: '#/definitions/entity.Wishlist'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
      security:
        - ApiKeyAuth: [ ]
      summary: Update a wishlist
      tags:
        - wishlists
  /api/v1/wishlists/{id}/items:
    get:
      consumes:
        - application/json
      description: Get wishlist items by its id
      parameters:
        - description: wishlist id
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: wishlist items
          schema:
            items:
              $ref: '#/definitions/entity.WishlistItem'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
      security:
        - ApiKeyAuth: [ ]
      summary: Get wishlist items
      tags:
        - wishlists
  /auth/sign-in:
    post:
      consumes:
        - application/json
      description: Create user account
      parameters:
        - description: body request to sign in
          in: body
          name: q
          required: true
          schema:
            $ref: '#/definitions/request.SignInRequest'
      produces:
        - application/json
      responses:
        "200":
          description: access token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
      summary: Sign in
      tags:
        - auth
  /auth/sign-up:
    post:
      consumes:
        - application/json
      description: Create user account
      parameters:
        - description: body request to sign up
          in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/request.SignUpRequest'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrs.ErrorResponse'
      summary: Sign up
      tags:
        - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
